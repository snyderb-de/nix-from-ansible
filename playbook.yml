# playbook.yml
- name: Bootstrap Nix with Ansible
  hosts: localhost
  gather_facts: true
  become: true

  tasks:
    - name: Detect OS type
      set_fact:
        is_macos: "{{ ansible_facts['system'] == 'Darwin' }}"
        is_linux: "{{ ansible_facts['system'] == 'Linux' }}"

    - name: Set nix-config repo URL based on OS
      set_fact:
        nix_config_repo_url: "{{ nix_config_repo_macos if is_macos else nix_config_repo_linux }}"

    - name: Ensure ~/.zshrc exists
      file:
        path: "{{ ansible_env.HOME }}/.zshrc"
        state: touch
        mode: '0644'

    - name: Ensure ~/.config directory exists
      file:
        path: "{{ ansible_env.HOME }}/.config"
        state: directory
        mode: '0755'

    - name: Check if zsh is installed (Linux only)
      when: is_linux
      command: which zsh
      register: zsh_check
      ignore_errors: true

    - name: Install zsh if missing (Linux only)
      when: is_linux and zsh_check.rc != 0
      package:
        name: zsh
        state: present

    - name: Check current user shell (Linux only)
      when: is_linux
      command: getent passwd {{ ansible_env.USER }}
      register: user_info

    - name: Change default shell to zsh (Linux only if needed)
      when: is_linux and (user_info.stdout.split(':')[-1] != '/bin/zsh')
      user:
        name: "{{ ansible_env.USER }}"
        shell: /bin/zsh

    - name: Check if Nix is already installed
      stat:
        path: /nix
      register: nix_installed

    - name: Install Nix (macOS)
      when: is_macos and not nix_installed.stat.exists
      shell: |
        sh <(curl -L https://nixos.org/nix/install) --daemon --no-modify-shell
      args:
        executable: /bin/zsh
      register: nix_install_result
      failed_when: nix_install_result.rc != 0

    - name: Ensure Nix is initialized in .zshrc (macOS only)
      when: is_macos
      lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        line: 'source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
        create: yes
        insertafter: EOF

    - name: Install Nix (Linux)
      when: is_linux and not nix_installed.stat.exists
      shell: |
        sh <(curl -L https://nixos.org/nix/install) --daemon
      args:
        executable: /bin/bash

    - name: Ensure nix-config repo is present and up to date
      git:
        repo: "{{ nix_config_repo_url }}"
        dest: "{{ ansible_env.HOME }}/nix-config"
        version: main
        update: yes

    - name: Install Raycast via Homebrew Cask (macOS only)
      when: is_macos
      community.general.homebrew:
        name: raycast
        state: present
        install_options: cask

    - name: Home Manager setup
      block:
        - name: Check if home-manager is already initialized
          stat:
            path: "{{ ansible_env.HOME }}/.config/home-manager"
          register: hm_initialized

        - name: Initialize Home Manager with flake
          when: not hm_initialized.stat.exists
          shell: |
            nix run home-manager/master -- init --switch --flake ~/nix-config#{{ ansible_env.USER }}@{{ ansible_hostname }}
          args:
            executable: /bin/zsh
          environment:
            NIXPKGS_ALLOW_UNFREE: "1"

        - name: Apply Home Manager config
          shell: |
            home-manager switch --flake ~/nix-config#{{ ansible_env.USER }}@{{ ansible_hostname }}
          args:
            executable: /bin/zsh
